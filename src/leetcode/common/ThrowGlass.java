package leetcode.common;

/**
 *
 * 一种杯子，若在第N层被摔破，则在任何比N高的楼层均会破，若在第M层不破，则在任何比M低的楼层均不会破，
 * 给你两个这样的杯子，让你在100层高的楼层中测试，要求用最少的测试次数找出恰巧会使杯子破碎的楼层。
 *
 * 分析
 * 1.如果使用二分，最坏的情况在99层碎，第一个杯子在50层扔就碎了，第二个杯子需要线性向上逐层遍历到99，共50次
 * 2.尝试使用分区间，第一个杯子每10层扔，比如10、20、30...90, 最坏的情况是99层碎，第一个杯子在90层碎，第二个杯子线性遍历到99，共19次
 * 3.借鉴2思路，第一个杯子用于确定区间层数，第二个杯子用于线性查找
 *   假设至少需要x次试验，则第一个杯子一定在x层开始扔 --考虑第一个杯子在x层碎了，则第二个杯子需要从1开始逐层扔到x才能满足假设条件 --共x-1次
 *  如果第一个杯子在x层没有碎，下一次扔的区间是 x+（x-1）层，因为如果第一个杯子在x+（x-1）层碎了，留给第二个杯子的剩余试验次数是 x-2，第二个杯子需要线性遍历(x, x+(x-1))才能满足剩余次数的(x-2)假设条件
 * 同理如果第一个杯子没有碎，下一次扔的楼层是 x+(x-1)+(x-2)层，因为如果第一个杯子碎了，留给第二个杯子的剩余试验次数是 x-3，第二个杯子需要线性遍历(x+(x-1), x+(x-1)+(x-2))才能满足剩余次数的(x-3)假设条件
 *  最终 x + (x-1) + (x-2) + .... + 2 = 100  => (x+1)x / 2 >= 100  => x=14
 *
 * @Author: chaoyi.zhang
 * @Date: 2020/10/20 13:38
 */
public class ThrowGlass {

    public static void main(String[] args){

    }


}
